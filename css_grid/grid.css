/* implicit grid: determines default behavior for the placement of elements when there are more than fit into the grid specified.
Default behavior of the implicit grid: items fill up rows first, adding new rows as necessary. 
New grid rows will only be tall enough to contain the content within them.
*/

header, footer {
  background-color: #ffa500;
  text-align: center;
  min-width: 500px;
}

main {
  display: grid;
  grid-template-columns: 250px 250px;
  grid-template-rows: repeat(3, 450px);
  grid-gap: 20px;
  margin-top: 44px;
  /* justify-items: positions grid items within their columns/along row axis (left to right); set on container */
  /* start end center stretch */
  /* w/o setting justify-items property, elements will span width of column they are in */
  /* w/ justify-items, elements will only be as wide as necessary to contain their content */
  justify-items: center;
  /* justify-content: positions a grid within its parent element along row axis; set on container */
  /* start (aligns grid to left side of grid container) end center stretch 
  space-around (includes an equal amount of space on each side of a grid element, resulting in double the amount of space between elements as there is before the first and after the last element)
  space-between (includes an equal amount of space between grid items and no space at either end)
  space-evenly (places an even amount of space between grid items and at either end) */
  justify-content: center;
  /* align-items: positions grid items along the block, or column axis (top to bottom); set on container */
  /* start end center stretch */
  /* w/o setting align-items property, elements will span height of row they are in */
  /* w/ align-items, elements will be centered vertically inside of their rows, only be as tall as necessary to contain their content */
  /* if specify height of element, it will not stretch height of row even if align-items: stretch is set */
  align-items: stretch;
  /* align-content: positions the rows along the column axis (top to bottom); set on container */
  /* start (aligns the grid to the top of the grid container) end center stretch 
  space-around (includes an equal amount of space on each side of a grid element, resulting in double the amount of space between elements as there is before the first and after the last element)
  space-between (includes an equal amount of space between grid items and no space at either end)
  space-evenly (places an even amount of space between grid items and at either end) */
  /* height: 1600px; */
  align-content: center;
  /* grid-auto-rows specifies the height of implicitly added grid rows.
  grid-auto-columns specifies the width of implicitly added grid columns. 
  declared on grid container
  px, %, fr, repeat()
  If not specify grid-auto-rows, rows would be auto-adjusted to the height of the content of the grid items. */
  grid-auto-rows: 500px;
  /* grid-auto-flow specifies whether new elements should be added to rows or columns; declared on grid containers 
  row: specifies new elements should fill rows from left to right and create new rows when there are too many elements (default)
  column: specifies new elements should fill columns from top to bottom and create new columns when there are too many elements
  dense: invokes an algorithm that attempts to fill holes earlier in the grid layout if smaller elements are added (grid-auto-flow: row dense)
  */
  grid-auto-flow: column;
}

h2 {
  font-family: Poppins;
  font-size: 18px;
  font-weight: 600;
  letter-spacing: 0.3px;
  text-align: left;
  color: #ffa500;
  padding: 10px 0px 10px 10px;
}

img {
  width: 100%;
  height: auto;
}

.recipe {
  box-shadow: 0 1px 1px 0 rgba(0, 0, 0, 0.5);
  /* specifying width of element, it will not stretch width of column */
  width: 200px;
}

.a {
  /* align-self specifies how an individual element should position itself with respect to the column axis, 
  will override align-items for any item on which it is declared */
  /* justify-self specifies how an individual element should position itself with respect to the row axis, 
  will override justify-items for any item on which it is declared */
  /* start end center stretch */
  
}

.c {
  
}

.time {
  padding-left: 10px;
  padding-top: 10px;
  width: 20px;
  height: auto;
}

.mins {
  display: inline-block;
  font-family: Poppins;
  font-size: 14px;
  font-weight: 500;
  letter-spacing: 0.3px;
  text-align: left;
  color: #4a4a4a;
  position: relative;
  bottom: 5px;
}

.description {
  font-family: Work Sans;
  font-size: 12px;
  font-weight: 300;
  line-height: 1.29;
  letter-spacing: 0.1px;
  text-align: left;
  color: #4a4a4a;
  padding: 10px 0px 10px 10px;
  border-top: 1px solid #4a4a4a;
}

.logo {
  width: 115px;
  height: 21.1px;
  object-fit: contain;
  padding: 20px;
}

.container {
  min-width: 500px;
  margin: auto;
}

footer {
  margin-top: 44px;
}
